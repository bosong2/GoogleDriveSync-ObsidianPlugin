/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var ie=Object.defineProperty;var We=Object.getOwnPropertyDescriptor;var Je=Object.getOwnPropertyNames;var Ve=Object.prototype.hasOwnProperty;var Qe=(e,r,t)=>r in e?ie(e,r,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[r]=t;var Ke=(e,r)=>()=>(e&&(r=e(e=0)),r);var Ce=(e,r)=>{for(var t in r)ie(e,t,{get:r[t],enumerable:!0})},Ye=(e,r,t,n)=>{if(r&&typeof r=="object"||typeof r=="function")for(let s of Je(r))!Ve.call(e,s)&&s!==t&&ie(e,s,{get:()=>r[s],enumerable:!(n=We(r,s))||n.enumerable});return e};var Xe=e=>Ye(ie({},"__esModule",{value:!0}),e);var U=(e,r,t)=>Qe(e,typeof r!="symbol"?r+"":r,t);var ze={};Ce(ze,{ErrorManager:()=>K,classifyError:()=>He,logError:()=>dt,readErrors:()=>lt});var He,Q,K,lt,dt,Fe=Ke(()=>{He=e=>{var t;let r=((t=e==null?void 0:e.message)==null?void 0:t.toLowerCase())||"";return r.includes("network")||r.includes("connection")?"network":r.includes("permission")||r.includes("forbidden")||r.includes("unauthorized")?"permission":r.includes("size")||r.includes("too large")?"file_size":r.includes("timeout")||r.includes("timed out")?"timeout":r.includes("rate limit")||r.includes("quota")?"rate_limit":"unknown"},Q=class Q{constructor(r){this.t=r,this.errorFilePath=`${r.manifest.dir}/error.json`}static getInstance(r){return Q.instance||(Q.instance=new Q(r)),Q.instance}static resetInstance(){Q.instance=null}async loadErrors(){try{if(!await this.t.app.vault.adapter.exists(this.errorFilePath))return[];let r=await this.t.app.vault.adapter.read(this.errorFilePath);return JSON.parse(r).errors||[]}catch(r){return console.error("Failed to load error.json:",r),[]}}async saveErrors(r){try{let t={version:"1.0.0",errors:r,lastUpdated:Date.now()};await this.t.app.vault.adapter.write(this.errorFilePath,JSON.stringify(t,null,2))}catch(t){throw console.error("Failed to save error.json:",t),t}}async addError(r,t,n){let s=await this.loadErrors(),c=s.findIndex(f=>f.filePath===r),u={filePath:r,errorType:He(n),errorMessage:n.message||String(n),timestamp:Date.now(),retryCount:c>=0?s[c].retryCount+1:1,lastAttempt:new Date().toISOString(),operation:t};c>=0?s[c]=u:s.push(u),await this.saveErrors(s)}async removeErrors(r){let n=(await this.loadErrors()).filter(s=>!r.includes(s.filePath));await this.saveErrors(n)}async clearAllErrors(){await this.saveErrors([])}async getErrorCount(){return(await this.loadErrors()).length}async getRetriableErrors(){return(await this.loadErrors()).filter(t=>t.retryCount<3&&["network","timeout","rate_limit"].includes(t.errorType))}async incrementRetryCount(r){let t=await this.loadErrors(),n=t.findIndex(s=>s.filePath===r);n>=0&&(t[n].retryCount++,t[n].lastAttempt=new Date().toISOString(),await this.saveErrors(t))}};Q.instance=null;K=Q,lt=async e=>await K.getInstance(e).loadErrors(),dt=async(e,r,t)=>{await K.getInstance(e).addError(r,"create",t)}});var ut={};Ce(ut,{default:()=>he});module.exports=Xe(ut);var te=class extends Error{constructor(t,n,s){let c=t.status||t.status===0?t.status:"",u=t.statusText||"",f=`${c} ${u}`.trim(),g=f?`status code ${f}`:"an unknown error";super(`Request failed with ${g}: ${n.method} ${n.url}`);U(this,"response");U(this,"request");U(this,"options");this.name="HTTPError",this.response=t,this.request=n,this.options=s}};var Y=class extends Error{constructor(t){super(`Request timed out: ${t.method} ${t.url}`);U(this,"request");this.name="TimeoutError",this.request=t}};var X=e=>e!==null&&typeof e=="object";var re=(...e)=>{for(let r of e)if((!X(r)||Array.isArray(r))&&r!==void 0)throw new TypeError("The `options` argument must be an object");return we({},...e)},me=(e={},r={})=>{let t=new globalThis.Headers(e),n=r instanceof globalThis.Headers,s=new globalThis.Headers(r);for(let[c,u]of s.entries())n&&u==="undefined"||u===void 0?t.delete(c):t.set(c,u);return t};function ae(e,r,t){var n,s;return Object.hasOwn(r,t)&&r[t]===void 0?[]:we((n=e[t])!=null?n:[],(s=r[t])!=null?s:[])}var ye=(e={},r={})=>({beforeRequest:ae(e,r,"beforeRequest"),beforeRetry:ae(e,r,"beforeRetry"),afterResponse:ae(e,r,"afterResponse"),beforeError:ae(e,r,"beforeError")}),we=(...e)=>{let r={},t={},n={};for(let s of e)if(Array.isArray(s))Array.isArray(r)||(r=[]),r=[...r,...s];else if(X(s)){for(let[c,u]of Object.entries(s))X(u)&&c in r&&(u=we(r[c],u)),r={...r,[c]:u};X(s.hooks)&&(n=ye(n,s.hooks),r.hooks=n),X(s.headers)&&(t=me(t,s.headers),r.headers=t)}return r};var xe=(()=>{let e=!1,r=!1,t=typeof globalThis.ReadableStream=="function",n=typeof globalThis.Request=="function";if(t&&n)try{r=new globalThis.Request("https://empty.invalid",{body:new globalThis.ReadableStream,method:"POST",get duplex(){return e=!0,"half"}}).headers.has("Content-Type")}catch(s){if(s instanceof Error&&s.message==="unsupported BodyInit type")return!1;throw s}return e&&!r})(),Ie=typeof globalThis.AbortController=="function",Re=typeof globalThis.ReadableStream=="function",$e=typeof globalThis.FormData=="function",ce=["get","post","put","patch","head","delete"],Ze=()=>{};Ze();var Ae={json:"application/json",text:"text/*",formData:"multipart/form-data",arrayBuffer:"*/*",blob:"*/*"},le=2147483647,de=Symbol("stop"),_e={json:!0,parseJson:!0,stringifyJson:!0,searchParams:!0,prefixUrl:!0,retry:!0,timeout:!0,hooks:!0,throwHttpErrors:!0,onDownloadProgress:!0,fetch:!0},Oe={method:!0,headers:!0,body:!0,mode:!0,credentials:!0,cache:!0,redirect:!0,referrer:!0,referrerPolicy:!0,integrity:!0,keepalive:!0,signal:!0,window:!0,dispatcher:!0,duplex:!0,priority:!0};var Be=e=>ce.includes(e)?e.toUpperCase():e,et=["get","put","head","delete","options","trace"],tt=[408,413,429,500,502,503,504],rt=[413,429,503],Me={limit:2,methods:et,statusCodes:tt,afterStatusCodes:rt,maxRetryAfter:Number.POSITIVE_INFINITY,backoffLimit:Number.POSITIVE_INFINITY,delay:e=>.3*2**(e-1)*1e3},je=(e={})=>{if(typeof e=="number")return{...Me,limit:e};if(e.methods&&!Array.isArray(e.methods))throw new Error("retry.methods must be an array");if(e.statusCodes&&!Array.isArray(e.statusCodes))throw new Error("retry.statusCodes must be an array");return{...Me,...e}};async function ve(e,r,t,n){return new Promise((s,c)=>{let u=setTimeout(()=>{t&&t.abort(),c(new Y(e))},n.timeout);n.fetch(e,r).then(s).catch(c).then(()=>{clearTimeout(u)})})}async function be(e,{signal:r}){return new Promise((t,n)=>{r&&(r.throwIfAborted(),r.addEventListener("abort",s,{once:!0}));function s(){clearTimeout(c),n(r.reason)}let c=setTimeout(()=>{r==null||r.removeEventListener("abort",s),t()},e)})}var qe=(e,r)=>{let t={};for(let n in r)!(n in Oe)&&!(n in _e)&&!(n in e)&&(t[n]=r[n]);return t};var se=class e{constructor(r,t={}){U(this,"request");U(this,"abortController");U(this,"_retryCount",0);U(this,"_input");U(this,"_options");var n,s,c,u,f,g,m,F;if(this._input=r,this._options={...t,headers:me(this._input.headers,t.headers),hooks:ye({beforeRequest:[],beforeRetry:[],beforeError:[],afterResponse:[]},t.hooks),method:Be((n=t.method)!=null?n:this._input.method),prefixUrl:String(t.prefixUrl||""),retry:je(t.retry),throwHttpErrors:t.throwHttpErrors!==!1,timeout:(s=t.timeout)!=null?s:1e4,fetch:(c=t.fetch)!=null?c:globalThis.fetch.bind(globalThis)},typeof this._input!="string"&&!(this._input instanceof URL||this._input instanceof globalThis.Request))throw new TypeError("`input` must be a string, URL, or Request");if(this._options.prefixUrl&&typeof this._input=="string"){if(this._input.startsWith("/"))throw new Error("`input` must not begin with a slash when using `prefixUrl`");this._options.prefixUrl.endsWith("/")||(this._options.prefixUrl+="/"),this._input=this._options.prefixUrl+this._input}if(Ie){this.abortController=new globalThis.AbortController;let v=(u=this._options.signal)!=null?u:this._input.signal;v==null||v.addEventListener("abort",()=>{this.abortController.abort(v.reason)}),this._options.signal=this.abortController.signal}if(xe&&(this._options.duplex="half"),this._options.json!==void 0&&(this._options.body=(m=(g=(f=this._options).stringifyJson)==null?void 0:g.call(f,this._options.json))!=null?m:JSON.stringify(this._options.json),this._options.headers.set("content-type",(F=this._options.headers.get("content-type"))!=null?F:"application/json")),this.request=new globalThis.Request(this._input,this._options),this._options.searchParams){let M="?"+(typeof this._options.searchParams=="string"?this._options.searchParams.replace(/^\?/,""):new URLSearchParams(this._options.searchParams).toString()),R=this.request.url.replace(/(?:\?.*?)?(?=#|$)/,M);($e&&this._options.body instanceof globalThis.FormData||this._options.body instanceof URLSearchParams)&&!(this._options.headers&&this._options.headers["content-type"])&&this.request.headers.delete("content-type"),this.request=new globalThis.Request(new globalThis.Request(R,{...this.request}),this._options)}}static create(r,t){let n=new e(r,t),s=async()=>{if(typeof n._options.timeout=="number"&&n._options.timeout>le)throw new RangeError(`The \`timeout\` option cannot be greater than ${le}`);await Promise.resolve();let f=await n._fetch();for(let g of n._options.hooks.afterResponse){let m=await g(n.request,n._options,n._decorateResponse(f.clone()));m instanceof globalThis.Response&&(f=m)}if(n._decorateResponse(f),!f.ok&&n._options.throwHttpErrors){let g=new te(f,n.request,n._options);for(let m of n._options.hooks.beforeError)g=await m(g);throw g}if(n._options.onDownloadProgress){if(typeof n._options.onDownloadProgress!="function")throw new TypeError("The `onDownloadProgress` option must be a function");if(!Re)throw new Error("Streams are not supported in your environment. `ReadableStream` is missing.");return n._stream(f.clone(),n._options.onDownloadProgress)}return f},u=n._options.retry.methods.includes(n.request.method.toLowerCase())?n._retry(s):s();for(let[f,g]of Object.entries(Ae))u[f]=async()=>{n.request.headers.set("accept",n.request.headers.get("accept")||g);let F=(await u).clone();if(f==="json"){if(F.status===204||(await F.clone().arrayBuffer()).byteLength===0)return"";if(t.parseJson)return t.parseJson(await F.text())}return F[f]()};return u}_calculateRetryDelay(r){var n,s,c,u;if(this._retryCount++,this._retryCount>this._options.retry.limit||r instanceof Y)throw r;if(r instanceof te){if(!this._options.retry.statusCodes.includes(r.response.status))throw r;let f=(c=(s=(n=r.response.headers.get("Retry-After"))!=null?n:r.response.headers.get("RateLimit-Reset"))!=null?s:r.response.headers.get("X-RateLimit-Reset"))!=null?c:r.response.headers.get("X-Rate-Limit-Reset");if(f&&this._options.retry.afterStatusCodes.includes(r.response.status)){let g=Number(f)*1e3;Number.isNaN(g)?g=Date.parse(f)-Date.now():g>=Date.parse("2024-01-01")&&(g-=Date.now());let m=(u=this._options.retry.maxRetryAfter)!=null?u:g;return g<m?g:m}if(r.response.status===413)throw r}let t=this._options.retry.delay(this._retryCount);return Math.min(this._options.retry.backoffLimit,t)}_decorateResponse(r){return this._options.parseJson&&(r.json=async()=>this._options.parseJson(await r.text())),r}async _retry(r){try{return await r()}catch(t){let n=Math.min(this._calculateRetryDelay(t),le);if(this._retryCount<1)throw t;await be(n,{signal:this._options.signal});for(let s of this._options.hooks.beforeRetry)if(await s({request:this.request,options:this._options,error:t,retryCount:this._retryCount})===de)return;return this._retry(r)}}async _fetch(){for(let n of this._options.hooks.beforeRequest){let s=await n(this.request,this._options);if(s instanceof Request){this.request=s;break}if(s instanceof Response)return s}let r=qe(this.request,this._options),t=this.request;return this.request=t.clone(),this._options.timeout===!1?this._options.fetch(t,r):ve(t,r,this.abortController,this._options)}_stream(r,t){let n=Number(r.headers.get("content-length"))||0,s=0;return r.status===204?(t&&t({percent:1,totalBytes:n,transferredBytes:s},new Uint8Array),new globalThis.Response(null,{status:r.status,statusText:r.statusText,headers:r.headers})):new globalThis.Response(new globalThis.ReadableStream({async start(c){let u=r.body.getReader();t&&t({percent:0,transferredBytes:0,totalBytes:n},new Uint8Array);async function f(){let{done:g,value:m}=await u.read();if(g){c.close();return}if(t){s+=m.byteLength;let F=n===0?0:s/n;t({percent:F,transferredBytes:s,totalBytes:n},m)}c.enqueue(m),await f()}await f()}}),{status:r.status,statusText:r.statusText,headers:r.headers})}};var Te=e=>{let r=(t,n)=>se.create(t,re(e,n));for(let t of ce)r[t]=(n,s)=>se.create(n,re(e,s,{method:t}));return r.create=t=>Te(re(t)),r.extend=t=>(typeof t=="function"&&(t=t(e!=null?e:{})),Te(re(e,t))),r.stop=de,r},st=Te(),Z=st;var Se=require("obsidian"),Le=e=>Z.create({prefixUrl:"https://www.googleapis.com/",timeout:3e4,retry:{limit:3,methods:["get","post","patch","delete"],statusCodes:[408,413,429,500,502,503,504],backoffLimit:3e3},hooks:{beforeRequest:[async r=>{e.accessToken.expiresAt<Date.now()&&e.settings.refreshToken&&await ne(e),r.headers.set("Authorization",`Bearer ${e.accessToken.token}`)}],beforeRetry:[async({request:r,options:t,error:n,retryCount:s})=>{var c;if(n&&"response"in n&&((c=n.response)==null?void 0:c.status)===429){let f=n.response.headers.get("retry-after"),g=f?parseInt(f)*1e3:Math.pow(2,s)*1e3;await new Promise(m=>setTimeout(m,Math.min(g,1e4)))}console.log(`Retrying request (${s+1}/3): ${r.url}`)}]}}),ne=async e=>{try{let r=await Z.post(`${e.settings.ServerURL}/api/access`,{json:{refresh_token:e.settings.refreshToken}}).json();if(!r.access_token){new Se.Notice("Invalid refresh token. Please get a new one from our website.");return}return e.accessToken={token:r.access_token,expiresAt:Date.now()+r.expires_in*1e3},!0}catch(r){return new Se.Notice("Failed to refresh access token. Please check your server URL, network connection, and CORS settings."),!1}};var J=require("obsidian"),H="application/vnd.google-apps.folder",nt=["graph.json","workspace.json","workspace-mobile.json"],ot=["manifest.json","styles.css","main.js","data.json"],Ge=e=>{if(typeof e=="string")return`='${e}'`;if("contains"in e)return` contains '${e.contains}'`;if("not"in e)return`!='${e.not}'`},it={name:e=>"name"+Ge(e),mimeType:e=>"mimeType"+Ge(e),parent:e=>`'${e}' in parents`,starred:e=>`starred=${e}`,query:e=>`fullText contains '${e}'`,properties:e=>Object.entries(e).map(([r,t])=>`properties has { key='${r}' and value='${t}' }`).join(" and "),modifiedTime:e=>{if("eq"in e)return`modifiedTime='${e.eq}'`;if("gt"in e)return`modifiedTime>'${e.gt}'`;if("lt"in e)return`modifiedTime<'${e.lt}'`}};var Ue=e=>{let r=Le(e),t=i=>encodeURIComponent(`(${i.map(a=>`(${Object.entries(a).flatMap(([l,w])=>w===void 0?[]:Array.isArray(w)?w.map(d=>[l,d]):[[l,w]]).map(([l,w])=>it[l](w)).join(" and ")})`).join(" or ")}) and trashed=false and properties has { key='vault' and value='${e.app.vault.getName()}' }`),n=async({matches:i,pageToken:a,order:o="descending",pageSize:l=30,include:w=["id","name","mimeType","starred","description","properties"]})=>{let d=await r.get(`drive/v3/files?fields=nextPageToken,files(${w.join(",")})&pageSize=${l}&q=${i?t(i):"trashed=false"}${i!=null&&i.find(({query:h})=>h)?"":"&orderBy=name"+(o==="ascending"?"":" desc")}${a?"&pageToken="+a:""}`).json();if(d)return d},s=async(i,a=!1)=>{let o=await n({...i,pageSize:1e3});if(o){for(;o.nextPageToken;){let l=await n({...i,pageToken:o.nextPageToken,pageSize:1e3});if(!l)return;o.files.push(...l.files),o.nextPageToken=l.nextPageToken}return a?o.files:o.files.filter(({properties:l})=>(l==null?void 0:l.obsidian)!=="vault")}},c=async()=>{let i=await s({matches:[{properties:{obsidian:"vault"}}]},!0);if(!i){console.error("Failed to search for vault root folder");return}if(i.length)return i[0].id;try{let a=await r.post("drive/v3/files",{json:{name:e.app.vault.getName(),mimeType:H,description:"Obsidian Vault: "+e.app.vault.getName(),properties:{obsidian:"vault",vault:e.app.vault.getName()}}}).json();if(!a){console.error("Failed to create vault root folder");return}return console.log(`Created vault root folder: ${a.id}`),a.id}catch(a){console.error("Error creating vault root folder:",a);return}},u=async({name:i,parent:a,description:o,properties:l,modifiedTime:w})=>{if(!a&&(a=await c(),!a))throw console.error("Failed to get or create vault root folder"),new Error("Cannot create folder: vault root not available");l||(l={}),l.vault||(l.vault=e.app.vault.getName());let d=await s({include:["id","name"],matches:[{name:i,mimeType:H,parent:a}]});if(d&&d.length>0)return d[0].id;let h=await r.post("drive/v3/files",{json:{name:i,mimeType:H,description:o,parents:[a],properties:l,modifiedTime:w}}).json();if(h)return h.id},f=async(i,a,o,l)=>{if(!o&&(o=await c(),!o))return;l||(l={}),l.properties||(l.properties={}),l.properties.vault||(l.properties.vault=e.app.vault.getName());let w=new FormData;w.append("metadata",new Blob([JSON.stringify({name:a,mimeType:i.type,parents:[o],...l})],{type:"application/json"})),w.append("file",i);let d=await r.post("upload/drive/v3/files?uploadType=multipart&fields=id",{body:w}).json();if(d)return d.id},g=async(i,a,o={})=>{let l=new FormData;l.append("metadata",new Blob([JSON.stringify(o)],{type:"application/json"})),l.append("file",a);let w=await r.patch(`upload/drive/v3/files/${i}?uploadType=multipart&fields=id`,{body:l}).json();if(w)return w.id},m=async(i,a)=>{let o=await r.patch(`drive/v3/files/${i}`,{json:a}).json();if(o)return o.id},F=async i=>{if((await r.delete(`drive/v3/files/${i}`)).ok)return!0},v=i=>r.get(`drive/v3/files/${i}?alt=media&acknowledgeAbuse=true`),M=i=>r.get(`drive/v3/files/${i}`).json(),R=async i=>{let a=await s({matches:[{properties:{path:i}}]});if(a!=null&&a.length)return a[0].id},D=async i=>{let a=await s({matches:i.map(o=>({properties:{path:o}}))});if(a)return a.map(o=>({id:o.id,path:o.properties.path}))},S=async i=>{if(console.log("batchDelete called with IDs:",i),!i.length)return console.warn("batchDelete: No IDs provided"),!1;let a=new FormData;i.forEach((o,l)=>{let w=["--batch_boundary","Content-Type: application/http","",`DELETE /drive/v3/files/${o} HTTP/1.1`,"",""].join(`\r
`);a.append(`request_${l+1}`,w)}),a.append("","--batch_boundary--");try{let o=await r.post("batch/drive/v3",{headers:{"Content-Type":"multipart/mixed; boundary=batch_boundary"},body:a}).text();if(console.log("batchDelete response:",o),!o)return console.error("batchDelete: No response from Google Drive"),!1;let l=/HTTP\/1\.1 (200 OK|204 No Content)/g,w=/HTTP\/1\.1 4\d\d|HTTP\/1\.1 5\d\d/g,d=(o.match(l)||[]).length,h=(o.match(w)||[]).length;return console.log(`batchDelete results: ${d} successful, ${h} failed out of ${i.length} requests`),o}catch(o){throw console.error("batchDelete error:",o),o}},P=async()=>{let i=await r.get("drive/v3/changes/startPageToken").json();if(i)return i.startPageToken},A=async i=>{if(!i)return[];let a=l=>r.get(`drive/v3/changes?${new URLSearchParams({pageToken:l,pageSize:"1000",includeRemoved:"true"}).toString()}`).json(),o=await a(i);if(o){for(;o.nextPageToken;){let l=await a(o.nextPageToken);if(!l)return;o.changes.push(...l.changes),o.newStartPageToken=l.newStartPageToken,o.nextPageToken=l.nextPageToken}return o.changes}},I=async i=>{let a=i.filter(o=>o instanceof J.TFolder);if(a.length){let o=Math.max(...a.map(({path:l})=>l.split("/").length));for(let l=1;l<=o;l++){let w=i.filter(d=>d instanceof J.TFolder&&d.path.split("/").length===l);await Promise.all(w.map(d=>e.deleteFile(d))),w.forEach(d=>i=i.filter(({path:h})=>!h.startsWith(d.path+"/")&&h!==d.path))}}await Promise.all(i.map(o=>e.deleteFile(o)))},C=async()=>{let i=[],{vault:a}=e.app,{adapter:o}=a,[l,w]=await Promise.all([o.list(a.configDir),o.list(a.configDir+"/plugins")]);return await Promise.all(l.files.filter(d=>!nt.includes(pe(d))).map(async d=>{let h=await o.stat(d);((h==null?void 0:h.mtime)||0)>e.settings.lastSyncedAt&&i.push(d)}).concat(w.folders.map(async d=>{let h=await o.list(d);await Promise.all(h.files.filter(b=>ot.includes(pe(b))).map(async b=>{let E=await o.stat(b);((E==null?void 0:E.mtime)||0)>e.settings.lastSyncedAt&&i.push(b)}))}))),i},_=async()=>{let i=[],a=[],{vault:o}=e.app;console.log("Starting vault scan using Obsidian API...");let l=o.getAllLoadedFiles(),w=`${e.manifest.dir}/error.json`,d=o.configDir;l.forEach(b=>{b instanceof J.TFile?!b.path.startsWith(d+"/")&&!b.path.includes(".DS_Store")&&!b.path.includes(".git/")&&b.path!==w&&i.push(b.path):b instanceof J.TFolder&&!b.path.startsWith(d+"/")&&!b.path.includes(".git/")&&b.path!=="/"&&b.path!==""&&a.push(b.path)});let h=async b=>{try{let E=await o.adapter.list(b);E.files.forEach($=>{let q=`${e.manifest.dir}/error.json`;!$.startsWith((e.app.vault.configDir||".obsidian")+"/")&&!$.includes(".DS_Store")&&!$.includes(".git/")&&$!==q&&i.push($)});for(let $ of E.folders)!$.startsWith((e.app.vault.configDir||".obsidian")+"/")&&!$.includes(".git/")&&(a.push($),await h($))}catch(E){console.warn(`Failed to scan folder ${b}:`,E)}};return await h(""),{files:i,folders:a}},k=async()=>{try{let i=await c();if(!i)return!0;let a=await s({matches:[{parent:i}],include:["id"]});return!a||a.length===0}catch(i){return console.warn("Failed to check first-time sync:",i),!1}},j=async(i,a)=>{var w;let o=i.sort((d,h)=>{let b=d.split("/").length,E=h.split("/").length;return b!==E?b-E:d.localeCompare(h)}),l=await c();if(!l){console.error("Failed to get vault root folder ID");return}for(let d of o){if(a[d])continue;let h=d.split("/"),b=h[h.length-1],E=h.slice(0,-1).join("/"),$;if(E){if($=a[E],!$){console.error(`Parent folder not found for ${d}, parent: ${E}`);continue}}else $=l;try{let q=await u({name:b,parent:$,properties:{path:d},modifiedTime:new Date().toISOString()});q?a[d]=q:console.error(`No folder ID returned for ${d}`)}catch(q){if(console.error(`Failed to create folder ${d}:`,q),(w=q.message)!=null&&w.includes("vault root not available"))throw q}}return a},O=async i=>{let a=i.sort((h,b)=>{let E=h.split("/").length,$=b.split("/").length;return E!==$?E-$:h.localeCompare(b)}),o=Object.fromEntries(Object.entries(e.settings.driveIdToPath).map(([h,b])=>[b,h])),l=await c();if(!l)return console.error("Failed to get vault root folder ID"),{createdCount:0,errors:["Failed to get vault root folder ID"]};let w=0,d=[];for(let h of a)try{if(o[h])continue;let b=h.split("/").pop()||"",E=h.split("/").slice(0,-1).join("/"),$=E?o[E]:l;if(!$){d.push(`Parent folder not found for: ${h}`);continue}let q=await u({name:b,parent:$,properties:{path:h},modifiedTime:new Date().toISOString()});q?(e.settings.driveIdToPath[q]=h,o[h]=q,w++):d.push(`Failed to create folder: ${h}`)}catch(b){d.push(`Error creating folder ${h}: ${b.message}`)}return{createdCount:w,errors:d}},p=async()=>{try{let i=await s({include:["id","properties","mimeType","modifiedTime"],matches:[]});return i?i.filter(a=>{var o;return((o=a.properties)==null?void 0:o.path)&&!a.properties.config}):[]}catch(i){return console.error("Failed to get all drive files:",i),[]}};return{paginateFiles:n,searchFiles:s,getRootFolderId:c,createFolder:u,uploadFile:f,updateFile:g,updateFileMetadata:m,deleteFile:F,getFile:v,getFileMetadata:M,idFromPath:R,idsFromPaths:D,getChangesStartToken:P,getChanges:A,batchDelete:S,checkConnection:ue,deleteFilesMinimumOperations:I,getConfigFilesToSync:C,getAllVaultFiles:_,getAllDriveFiles:p,isFirstTimeSync:k,createFoldersSequentially:O,syncFoldersHierarchy:j,performInitialSync:async(i={showProgress:!0})=>{try{let{files:a,folders:o}=await _();if(a.length===0&&o.length===0)return{success:!0,message:"No files to sync",filesAdded:0,foldersCreated:0};let l=await p(),w=Object.fromEntries(Object.entries(e.settings.driveIdToPath).map(([B,z])=>[z,B])),d=0,h=[],b=[];if(o.forEach(B=>{let z=w[B],N=l.find(ge=>ge.properties.path===B);!z&&!N?b.push(B):!z&&N?(w[B]=N.id,e.settings.driveIdToPath[N.id]=B):z&&!N&&b.push(B)}),b.length>0){let B=await O(b);d=B.createdCount,h=B.errors}let E=0,$=[];a.forEach(B=>{if(e.settings.operations[B])return;let z=w[B],N=l.find(ge=>ge.properties.path===B);!z&&!N?(e.settings.operations[B]="create",E++):!z&&N?(w[B]=N.id,e.settings.driveIdToPath[N.id]=B):z&&!N&&(e.settings.operations[B]="create",E++)}),await e.saveSettings();let q=[...h],fe=q.length===0;return{success:fe,filesAdded:E,foldersCreated:d,errors:q,message:fe?`Scan completed: ${E} files to sync, ${d} folders created`:`Scan completed with errors: ${E} files, ${d} folders (${q.length} errors)`}}catch(a){return console.error("performInitialSync error:",a),{success:!1,filesAdded:0,foldersCreated:0,errors:[a.message],message:`Scan failed: ${a.message}`}}}}},ue=async e=>{try{return(await Z.get(`${e.settings.ServerURL}/api/ping`)).ok}catch(r){return console.error("Connection check failed in checkConnection:",r),!1}},Ne=async(e,r)=>{try{return(await Z.get(`${r}/api/ping`)).ok}catch(t){return console.error("Server check failed in checkServer:",t),!1}},W=async(e,r)=>{let t=r||Math.min(20,Math.max(5,Math.ceil(e.length/4))),n=[],s=[];for(let f=0;f<e.length;f+=t){let g=e.slice(f,f+t);s.push(g)}let c=s.map(async f=>Promise.all(f.map(g=>g()))),u=await Promise.all(c);for(let f of u)n.push(...f);return n},oe=(e,r,t,n)=>`Syncing ${Math.floor(e+(r-e)*(t/n))}% (${t}/${n})`,pe=e=>e.split("/").slice(-1)[0],ee=e=>{let r=new Array(Math.max(...e.map(t=>(t instanceof J.TFolder?t.path:t).split("/").length))).fill(0).map(()=>[]);return e.forEach(t=>{r[(t instanceof J.TFolder?t.path:t).split("/").length-1].push(t)}),r};var L=require("obsidian");var at=async(e,r,t)=>{let n=await e.app.vault.adapter.stat(r.path),s=(n==null?void 0:n.mtime)||0,c=new Date(t.modifiedTime).getTime(),u=5e3,f=Math.abs(s-c),g=(n==null?void 0:n.size)||0,m=await e.app.vault.readBinary(r),F=m.byteLength,v=await e.drive.getFile(t.id).arrayBuffer(),M=F!==v.byteLength,R=!1,D="no_conflict";if(M)R=!0,D="content_diff";else if(f>u){let S=new Uint8Array(m),P=new Uint8Array(v);for(let A=0;A<S.length;A++)if(S[A]!==P[A]){R=!0,D="content_diff";break}!R&&f>u&&(D="time_diff")}return{hasConflict:R,reason:D,localModified:s,remoteModified:c,sizeDiff:M}},ct=async(e,r,t,n)=>{let s=new Date(n.localModified).toLocaleString(),c=new Date(n.remoteModified).toLocaleString(),u=`${r.path}.conflict-${Date.now()}.backup`,f=await e.drive.getFile(t.id).arrayBuffer();try{await e.app.vault.createBinary(u,f);let g=`Sync Conflict Detected!

File: ${r.path}
Local modified: ${s}
Remote modified: ${c}

Remote version saved as:
${u}

Please manually resolve the conflict.`;new L.Notice(g,15e3),console.warn("Sync conflict:",{file:r.path,conflict:n,backupPath:u})}catch(g){console.error("Failed to create conflict backup:",g),new L.Notice(`Conflict detected in ${r.path} but failed to create backup. Remote changes ignored.`,8e3)}},V=async(e,r)=>{let t=null;if(!r){if(e.syncing)return;t=await e.startSync()}let{vault:n}=e.app,s=n.adapter;e.accessToken.token||await ne(e);let c=new Date(e.settings.lastSyncedAt),u=await e.drive.searchFiles({include:["id","modifiedTime","properties","mimeType"],matches:[{modifiedTime:{gt:c.toISOString()}}]});if(!u)return new L.Notice("An error occurred fetching Google Drive files.");let f=await e.drive.getChanges(e.settings.changesToken);if(!f)return new L.Notice("An error occurred fetching Google Drive changes.");let g=f.filter(({removed:S})=>S).map(({fileId:S})=>{let P=e.settings.driveIdToPath[S];if(!P)return;delete e.settings.driveIdToPath[S];let A=n.getAbstractFileByPath(P);if(!A&&e.settings.operations[P]==="delete"){delete e.settings.operations[P];return}return A});if(!u.length&&!g.length)return r?void 0:(e.endSync(t),new L.Notice("You're up to date!"));let m=Object.fromEntries(Object.entries(e.settings.driveIdToPath).map(([S,P])=>[P,S]));(()=>{u.forEach(({id:S,properties:P})=>{m[P.path]=S}),e.settings.driveIdToPath=Object.fromEntries(Object.entries(m).map(([S,P])=>[P,S]))})(),await(async()=>{let S=g.filter(I=>I instanceof L.TFile).filter(I=>{if(e.settings.operations[I.path]==="modify"){m[I.path]||(e.settings.operations[I.path]="create");return}return!0}),P=g.map(I=>I==null?void 0:I.path),A=g.filter(I=>I instanceof L.TFolder).filter(I=>{if(!m[I.path]){if(I.children.find(({path:C})=>!P.includes(C)))return!0;e.settings.operations[I.path]="create"}});await e.drive.deleteFilesMinimumOperations([...A,...S])})(),t==null||t.setMessage("Syncing (33%)");let R=await(async()=>{let S=u.filter(({mimeType:C})=>C===H);if(S.length){let C=ee(S.map(({properties:_})=>_.path));for(let _ of C)await Promise.all(_.map(async k=>{if(delete e.settings.operations[k],!(n.getFolderByPath(k)||await s.exists(k)))return e.createFolder(k)}))}let P=0,A=0,I=u.filter(({mimeType:C})=>C!==H);return await W(I.map(C=>async()=>{let _=n.getFileByPath(C.properties.path)||await s.exists(C.properties.path),k=e.settings.operations[C.properties.path];if(P++,_ instanceof L.TFile&&k==="modify"){let O=await at(e,_,C);if(O.hasConflict){await ct(e,_,C,O),A++;return}return}if(_&&k==="create"){e.settings.operations[C.properties.path]="modify";return}let j=await e.drive.getFile(C.id).arrayBuffer();return t==null||t.setMessage(oe(33,100,P,I.length)),_ instanceof L.TFile?e.modifyFile(_,j,C.modifiedTime):e.upsertFile(C.properties.path,j,C.modifiedTime)})),A})();await(async()=>{let P=(await Promise.all(f.filter(({removed:k})=>k).map(async({fileId:k})=>{let j=e.settings.driveIdToPath[k];if(!j||n.getAbstractFileByPath(j))return;let O=await s.stat(j);if(O)return{path:j,type:O.type}}))).filter(Boolean),A=n.getConfig("trashOption");if(A==="local"||A==="system"){let k=A==="local"?s.trashLocal:s.trashSystem,j=P.filter(O=>O.type==="folder");if(j.length){let O=Math.max(...j.map(({path:p})=>p.split("/").length));for(let p=1;p<=O;p++){let y=P.filter(i=>i.type==="folder"&&i.path.split("/").length===p);await Promise.all(y.map(({path:i})=>k(i))),y.forEach(i=>P=P.filter(({path:a})=>!a.startsWith(i.path+"/")&&a!==i.path))}}return Promise.all(P.map(({path:O})=>k(O)))}let I=P.filter(k=>k.type==="file");await Promise.all(I.map(({path:k})=>s.remove(k)));let C=P.filter(k=>k.type==="folder"),_=ee(C.map(({path:k})=>k));_.reverse();for(let k of _)await Promise.all(k.map(async j=>{let O=await s.list(j);O.files.length+O.folders.length||s.rmdir(j,!1)}))})(),!r&&(await e.endSync(t),R>0?new L.Notice(`Pull completed with ${R} conflict(s). Please check .conflict.backup files and resolve manually.`,1e4):new L.Notice("Files have been synced from Google Drive!"))};var x=require("obsidian");Fe();var Pe=async e=>{var j,O;if(e.syncing)return;let r=await e.drive.getRootFolderId();if(!r){new x.Notice("Cannot get vault root folder ID. Please check your Google Drive connection.");return}if(await e.drive.isFirstTimeSync()){let p=await e.drive.performInitialSync();p.success?new x.Notice(`Auto-detected first sync: ${p.message}. Proceeding with push...`,8e3):(new x.Notice(`Initial sync warning: ${p.message}`),console.warn("Initial sync issues:",p.errors))}if(Object.entries(e.settings.operations).sort(([p],[y])=>p<y?-1:p>y?1:0).length===0){new x.Notice("No files to sync. Use 'Scan All Files' to add files to the sync queue.");return}let{vault:s}=e.app,c=s.adapter,u=await e.startSync();await V(e,!0);let f=Object.entries(e.settings.operations),g=f.filter(([p,y])=>y==="delete").sort(([p],[y])=>{let i=p.split("/").length,a=y.split("/").length;if(i!==a)return a-i;let{vault:o}=e.app,l=o.getAbstractFileByPath(p),w=o.getAbstractFileByPath(y),d=l instanceof x.TFile,h=w instanceof x.TFile;return d&&!h?-1:!d&&h?1:y.localeCompare(p)}),m=f.filter(([p,y])=>y==="create").sort(([p],[y])=>{let i=p.split("/").length,a=y.split("/").length;if(i!==a)return i-a;let{vault:o}=e.app,l=o.getAbstractFileByPath(p),w=o.getAbstractFileByPath(y),d=l instanceof x.TFolder,h=w instanceof x.TFolder;return d&&!h?-1:!d&&h?1:p.localeCompare(y)}),F=f.filter(([p,y])=>y==="modify"),v=Object.fromEntries(Object.entries(e.settings.driveIdToPath).map(([p,y])=>[y,p])),M=K.getInstance(e),R=0,D=0,S=m.length+F.length,P=new Set,A=await e.drive.searchFiles({include:["properties"],matches:[{properties:{config:"true"}}]});if(!A)return new x.Notice("An error occurred fetching Google Drive files.");if(await Promise.all(A.map(async({properties:p})=>{await c.exists(p.path)||g.push([p.path,"delete"])})),g.length){let p=g.map(([y])=>v[y]).filter(y=>y);if(p.length===0)console.warn("No valid IDs found for deletion"),new x.Notice("Warning: Some files could not be deleted from Google Drive (IDs not found).");else try{if(!await e.drive.batchDelete(p)){console.error("Delete request failed - no response"),new x.Notice("An error occurred deleting Google Drive files.");return}}catch(y){console.error("Delete request error:",y),new x.Notice("An error occurred deleting Google Drive files: "+y.message);return}g.forEach(([y])=>{delete e.settings.driveIdToPath[y],(y.endsWith("/")||s.getAbstractFileByPath(y)instanceof x.TFolder)&&Object.keys(e.settings.driveIdToPath).filter(a=>{let o=e.settings.driveIdToPath[a];return o&&o.startsWith(y+"/")}).forEach(a=>{let o=e.settings.driveIdToPath[a];delete e.settings.driveIdToPath[a],e.settings.operations[o]&&delete e.settings.operations[o]})})}if(u.setMessage("Syncing 0% (0/"+S+")"),m.length){let p=0,y=m.map(([o])=>s.getAbstractFileByPath(o)),i=y.filter(o=>o instanceof x.TFolder);if(i.length){let o=i.map(d=>d.path);try{await e.drive.syncFoldersHierarchy(o,v),o.forEach(d=>{v[d]&&(P.add(d),e.settings.driveIdToPath[v[d]]=d),p++})}catch(d){if(console.error("Failed to sync folder hierarchy:",d),(j=d.message)!=null&&j.includes("vault root not available"))return new x.Notice("Cannot sync: Google Drive vault root is missing and could not be created. Please check your permissions and network connection.");throw d}let l=i.length,w=Math.floor(l/S*100);u.setMessage(`Syncing ${w}% (${l}/${S}) - Folders created`)}let a=y.filter(o=>o instanceof x.TFile);await W(a.map(o=>async()=>{try{let h;if(o.parent&&o.parent.path!=="/"?(h=v[o.parent.path],h||(console.warn(`Parent folder ID not found for ${o.path}, parent: ${o.parent.path}. Using vault root instead.`),h=r)):h=r,!h)throw new Error(`Cannot determine parent folder ID for file: ${o.path}`);if(o.parent&&o.parent.path!=="/"&&h)try{let E=await e.drive.getFileMetadata(h)}catch(E){console.error("Parent folder verification failed:",E)}let b=await e.drive.uploadFile(new Blob([await s.readBinary(o)]),o.name,h,{properties:{path:o.path},modifiedTime:new Date().toISOString()});if(!b)throw new Error("Failed to get file ID from Google Drive");e.settings.driveIdToPath[b]=o.path,await M.removeErrors([o.path]),P.add(o.path),R++}catch(h){console.error(`Failed to upload file ${o.path}:`,h),await M.addError(o.path,"create",h),D++}p++;let l=R+D,w=Math.floor(l/S*100),d=D>0?`Syncing ${w}% (${l}/${S}, ${D} failed)`:`Syncing ${w}% (${l}/${S})`;u.setMessage(d)}))}if(F.length){let p=0,y=F.map(([a])=>s.getFileByPath(a)).filter(a=>a instanceof x.TFile),i=Object.fromEntries(Object.entries(e.settings.driveIdToPath).map(([a,o])=>[o,a]));await W(y.map(a=>async()=>{var d;try{if(!i[a.path])throw new Error("No file ID found for modify operation");if(!await e.drive.updateFile(i[a.path],new Blob([await s.readBinary(a)]),{modifiedTime:new Date().toISOString()}))throw new Error("Failed to update file on Google Drive");await M.removeErrors([a.path]),P.add(a.path),R++}catch(h){((d=h==null?void 0:h.response)==null?void 0:d.status)===404?(e.settings.operations[a.path]="create",i[a.path]&&delete e.settings.driveIdToPath[i[a.path]]):(console.error(`Failed to modify file ${a.path}:`,h),await M.addError(a.path,"modify",h),D++)}p++;let o=R+D,l=Math.floor(o/S*100),w=D>0?`Syncing ${l}% (${o}/${S}, ${D} failed)`:`Syncing ${l}% (${o}/${S})`;u.setMessage(w)}))}let I=await e.drive.getConfigFilesToSync(),C=new Set;if(I.forEach(p=>{let y=p.split("/");for(let i=1;i<y.length;i++)C.add(y.slice(0,i).join("/"))}),C.forEach(p=>{v[p]&&C.delete(p)}),C.size){await e.drive.syncFoldersHierarchy(Array.from(C),v);for(let p of C)v[p]&&(e.settings.driveIdToPath[v[p]]=p)}await W(I.map(p=>async()=>{var o;if(v[p])try{await e.drive.updateFile(v[p],new Blob([await c.readBinary(p)]),{modifiedTime:new Date().toISOString()});return}catch(l){if(((o=l==null?void 0:l.response)==null?void 0:o.status)===404)delete e.settings.driveIdToPath[v[p]],delete v[p];else throw l}let y=p.split("/").slice(0,-1).join("/"),i;if(y&&y!=="/"?(i=v[y],i||(console.warn(`Parent folder ID not found for config file ${p}, parent: ${y}. Using vault root instead.`),i=r)):i=r,!i)throw new Error(`Cannot determine parent folder ID for config file: ${p}`);let a=await e.drive.uploadFile(new Blob([await c.readBinary(p)]),pe(p),i,{properties:{path:p,config:"true"},modifiedTime:new Date().toISOString()});if(!a)return new x.Notice("An error occurred creating Google Drive config files.");e.settings.driveIdToPath[a]=p,v[p]=a}));let _=s.configDir+"/plugins/google-drive-sync/data.json",k=v[_];try{if(k)await e.drive.updateFile(k,new Blob([JSON.stringify(e.settings,null,2)]),{modifiedTime:new Date().toISOString()});else throw new Error("No data.json ID found, creating new file")}catch(p){if(((O=p==null?void 0:p.response)==null?void 0:O.status)===404||!k){let y=await e.drive.uploadFile(new Blob([JSON.stringify(e.settings,null,2)]),"data.json",v[s.configDir+"/plugins/google-drive-sync"],{properties:{path:_,config:"true"},modifiedTime:new Date().toISOString()});y&&(e.settings.driveIdToPath[y]=_,v[_]=y)}else throw p}g.forEach(([p])=>{delete e.settings.operations[p]}),P.forEach(p=>{delete e.settings.operations[p]}),await e.endSync(u,!1),D>0?new x.Notice(`Sync completed: ${R} succeeded, ${D} failed. Check sync errors in settings for details.`,1e4):new x.Notice("Sync completed successfully! All files synced without errors.")};var G=require("obsidian");var De=class extends G.Modal{constructor(r,t){super(r.app),this.proceed=t,this.setTitle("Are you sure you want to reset the data from Google Drive?"),this.setContent("You'll loose all the local changes to your data and load only the information on your google drive. This step is irreversible."),new G.Setting(this.contentEl).addButton(n=>n.setButtonText("Cancel").onClick(()=>this.close())).addButton(n=>n.setButtonText("RESET!").setWarning().onClick(()=>{t(!0),this.close()}))}onClose(){this.proceed(!1)}},ke=async e=>{if(e.syncing||!await new Promise(m=>{new De(e,m).open()}))return;let t=await e.startSync();await V(e,!0);let{vault:n}=e.app,s=Object.entries(e.settings.operations),c=s.filter(([m,F])=>F==="delete"),u=s.filter(([m,F])=>F==="create"),f=s.filter(([m,F])=>F==="modify"),g=Object.fromEntries(Object.entries(e.settings.driveIdToPath).map(([m,F])=>[F,m]));if(u.length&&await e.drive.deleteFilesMinimumOperations(u.map(([m])=>n.getAbstractFileByPath(m)).filter(m=>m instanceof G.TAbstractFile)),t.setMessage("Syncing (33%)"),f.length){let m=0,F=f.map(([v])=>n.getFileByPath(v)).filter(v=>v instanceof G.TFile);await W(F.map(v=>async()=>{let[M,R]=await Promise.all([e.drive.getFile(g[v.path]).arrayBuffer(),e.drive.getFileMetadata(g[v.path])]);return!M||!R?new G.Notice("An error occurred fetching Google Drive files."):(m++,t.setMessage(oe(33,66,m,F.length)),e.modifyFile(v,M,R.modifiedTime))}))}if(c.length){let m=await e.drive.searchFiles({include:["id","mimeType","properties","modifiedTime"],matches:c.map(([D])=>({properties:{path:D}}))});if(!m)return new G.Notice("An error occurred fetching Google Drive files.");let F=Object.fromEntries(m.map(D=>[D.properties.path,D])),v=c.filter(([D])=>F[D].mimeType===H);if(v.length){let D=ee(v.map(([S])=>S));for(let S of D)await Promise.all(S.map(P=>e.createFolder(P)))}let M=0,R=c.filter(([D])=>F[D].mimeType!==H);await W(R.map(([D])=>async()=>{let S=await e.drive.getFile(g[D]).arrayBuffer();return S?(M++,t.setMessage(oe(66,99,M,R.length)),e.createFile(D,S,F[D].modifiedTime)):new G.Notice("An error occurred fetching Google Drive files.")}))}e.settings.operations={},await e.endSync(t),new G.Notice("Reset complete.")};var T=require("obsidian"),pt={refreshToken:"",operations:{},driveIdToPath:{},lastSyncedAt:0,changesToken:"",ServerURL:""},he=class extends T.Plugin{constructor(){super(...arguments);this.accessToken={token:"",expiresAt:0};this.drive=Ue(this);this.debouncedSaveSettings=(0,T.debounce)(this.saveSettings.bind(this),500,!0)}async onload(){let{vault:t}=this.app;if(await this.loadSettings(),this.addSettingTab(new Ee(this.app,this)),!this.settings.refreshToken){new T.Notice("Please add your refresh token to Google Drive Sync through our website or our readme/this plugin's settings. If you haven't already, PLEASE read through this plugin's readme or website CAREFULLY for instructions on how to use this plugin. If you don't know what you're doing, your data could get DELETED.",0);return}this.ribbonIcon=this.addRibbonIcon("refresh-cw","Obsidian Google Drive",n=>{if(this.syncing)return;let s=new T.Menu;s.addItem(c=>c.setTitle("Pull from Drive").setIcon("cloud-download").onClick(()=>{V(this)})),s.addItem(c=>c.setTitle("Push to Drive").setIcon("cloud-upload").onClick(()=>{Pe(this)})),s.addItem(c=>c.setTitle("Reset from Drive").setIcon("triangle-alert").onClick(()=>{ke(this)})),s.showAtMouseEvent(n)}),this.addCommand({id:"push",name:"Push to Google Drive",callback:()=>Pe(this)}),this.addCommand({id:"pull",name:"Pull from Google Drive",callback:()=>V(this)}),this.addCommand({id:"reset",name:"Reset local vault to Google Drive",callback:()=>ke(this)}),this.registerEvent(this.app.workspace.on("quit",()=>this.saveSettings())),this.app.workspace.onLayoutReady(()=>this.registerEvent(t.on("create",this.handleCreate.bind(this)))),this.registerEvent(t.on("delete",this.handleDelete.bind(this))),this.registerEvent(t.on("modify",this.handleModify.bind(this))),this.registerEvent(t.on("rename",this.handleRename.bind(this))),ue(this).then(async n=>{n&&(this.syncing=!0,this.ribbonIcon.addClass("spin"),await V(this,!0),await this.endSync())})}onunload(){return this.saveSettings()}async loadSettings(){this.settings=Object.assign({},pt,await this.loadData())}saveSettings(){return this.saveData(this.settings)}handleCreate(t){t.path.includes(".DS_Store")||t.path!==`${this.manifest.dir}/error.json`&&(this.settings.operations[t.path]==="delete"?t instanceof T.TFile?this.settings.operations[t.path]="modify":delete this.settings.operations[t.path]:this.settings.operations[t.path]="create",this.debouncedSaveSettings())}handleDelete(t){t.path.includes(".DS_Store")||t.path!==`${this.manifest.dir}/error.json`&&(this.settings.operations[t.path]==="create"?delete this.settings.operations[t.path]:this.settings.operations[t.path]="delete",this.debouncedSaveSettings())}handleModify(t){if(t.path.includes(".DS_Store")||t.path===`${this.manifest.dir}/error.json`)return;let n=this.settings.operations[t.path];n==="create"||n==="modify"||(this.settings.operations[t.path]="modify",this.debouncedSaveSettings())}handleRename(t,n){if(t.path.includes(".DS_Store"))return;let s=`${this.manifest.dir}/error.json`;t.path===s||n===s||(this.handleDelete({...t,path:n}),this.handleCreate(t),this.debouncedSaveSettings())}async createFolder(t){let n=this.settings.operations[t];await this.app.vault.createFolder(t),this.settings.operations[t]=n,n||delete this.settings.operations[t]}async createFile(t,n,s){let c=this.settings.operations[t];typeof s=="string"&&(s=new Date(s)),s instanceof Date&&(s=s.getTime()),await this.app.vault.createBinary(t,n,{mtime:s}),this.settings.operations[t]=c,c||delete this.settings.operations[t]}async modifyFile(t,n,s){let c=this.settings.operations[t.path];typeof s=="string"&&(s=new Date(s)),s instanceof Date&&(s=s.getTime()),await this.app.vault.modifyBinary(t,n,{mtime:s}),this.settings.operations[t.path]=c,c||delete this.settings.operations[t.path]}async upsertFile(t,n,s){let c=this.settings.operations[t];typeof s=="string"&&(s=new Date(s)),s instanceof Date&&(s=s.getTime()),await this.app.vault.adapter.writeBinary(t,n,{mtime:s}),this.settings.operations[t]=c,c||delete this.settings.operations[t]}async deleteFile(t){let n=this.settings.operations[t.path];await this.app.fileManager.trashFile(t),delete this.settings.operations[t.path],n||delete this.settings.operations[t.path]}async startSync(){if(!await ue(this))throw new T.Notice("You are not connected to the internet, so you cannot sync right now. Please try syncing once you have connection again.");return this.ribbonIcon.addClass("spin"),this.syncing=!0,new T.Notice("Syncing (0%)",0)}async endSync(t,n=!0){if(n){let c=await this.drive.getConfigFilesToSync();this.settings.lastSyncedAt=Date.now(),await Promise.all(c.map(async u=>this.app.vault.adapter.writeBinary(u,await this.app.vault.adapter.readBinary(u),{mtime:Date.now()})))}else this.settings.lastSyncedAt=Date.now();let s=await this.drive.getChangesStartToken();if(!s)return new T.Notice("An error occurred fetching Google Drive changes token.");this.settings.changesToken=s,await this.saveSettings(),this.ribbonIcon.removeClass("spin"),this.syncing=!1,t==null||t.hide()}},Ee=class extends T.PluginSettingTab{constructor(r,t){super(r,t),this.plugin=t}display(){let{containerEl:r}=this;r.empty();let t=r.createEl("a",{text:"Get refresh token"});t.addClass("gds-link-pointer"),t.onclick=()=>{this.plugin.settings.ServerURL?window.open(this.plugin.settings.ServerURL,"_blank"):new T.Notice("Please set and save a Server URL below before getting a token.")};let n="";new T.Setting(r).setName("Server URL").setDesc("Enter the custom server URL for token exchange.").addText(s=>{s.setPlaceholder("https://example.com").setValue(this.plugin.settings.ServerURL).onChange(c=>{n=c})}).addButton(s=>{s.setButtonText("Save").onClick(async()=>{try{new URL(n)}catch(u){new T.Notice("Invalid Server URL format.");return}if(!await Ne(this.app,n)){new T.Notice("Server is not reachable. Please check the URL and server status.");return}this.plugin.settings.ServerURL=n,await this.plugin.saveSettings(),new T.Notice("Server URL saved successfully.")})}),new T.Setting(r).setName("Refresh token").setDesc("A refresh token is required to access your Google Drive.").addText(s=>{s.setPlaceholder("Enter your refresh token").setValue(this.plugin.settings.refreshToken).onChange(async c=>{this.plugin.settings.refreshToken=c})}).addButton(s=>{s.setButtonText("Check").onClick(async()=>{if(!this.plugin.settings.ServerURL){new T.Notice("Please set and save the Server URL first.");return}if(!this.plugin.settings.refreshToken){new T.Notice("Please enter a refresh token.");return}await ne(this.plugin)?(await this.plugin.saveSettings(),new T.Notice("Refresh token is valid and has been saved!")):new T.Notice("Failed to validate refresh token. Please check the token and server settings.")})}),new T.Setting(r).setName("Initial Vault Sync").setDesc("Step 1: Scan and add all existing vault files to sync queue. After scanning, use 'Push' to upload them to Google Drive.").addButton(s=>{s.setButtonText("Scan All Files").onClick(async()=>{if(!this.plugin.settings.refreshToken){new T.Notice("Please set up your refresh token first.");return}s.setDisabled(!0),s.setButtonText("Scanning...");try{let c=await this.plugin.drive.performInitialSync();if(c.success)new T.Notice(`${c.message}. Now use 'Push' (ribbon icon) to upload these files to Google Drive.`);else{let u=c.errors&&c.errors.length>0?`${c.message}
Errors: ${c.errors.join(", ")}`:c.message;new T.Notice(u),console.error("Initial sync errors:",c.errors)}}catch(c){new T.Notice(`Initial sync failed: ${c.message}`),console.error("Initial sync error:",c)}finally{s.setDisabled(!1),s.setButtonText("Scan All Files")}})}),new T.Setting(r).setName("Sync Queue Status").setDesc("Files in the operation queue will be synchronized to Google Drive when you execute 'Push'.").addButton(s=>{s.setButtonText("View Queue").onClick(()=>{let c=this.plugin.settings.operations,u=Object.entries(c).map(([m,F])=>`${F.toUpperCase()}: ${m}`).slice(0,20),f=Object.keys(c).length,g=f===0?"No files in sync queue.":`Sync Queue (${f} files):

${u.join(`
`)}${f>20?`

... and ${f-20} more files`:""}`;new T.Notice(g,1e4)})}),this.createErrorSetting(r),new T.Setting(r).setName("Reset Sync State").setDesc("Clear all tracked operations. Use only if you want to start fresh.").addButton(s=>{s.setButtonText("Clear Operations").setWarning().onClick(async()=>{confirm("Are you sure you want to clear all tracked file operations? This cannot be undone.")&&(this.plugin.settings.operations={},await this.plugin.saveSettings(),new T.Notice("All operations cleared. Use 'Scan All Files' to rebuild the sync queue."))})})}async createErrorSetting(r){try{let{ErrorManager:t}=await Promise.resolve().then(()=>(Fe(),ze)),n=t.getInstance(this.plugin),s=await n.getErrorCount();new T.Setting(r).setName("Sync Errors").setDesc(s>0?`${s} files failed to sync. These will be retried automatically on next sync.`:"No sync errors. All files synced successfully.").addButton(c=>{c.setButtonText("View Errors").setDisabled(s===0).onClick(async()=>{let u=await n.loadErrors();if(u.length===0){new T.Notice("No sync errors found.");return}let f=u.slice(0,15).map(m=>`${m.errorType.toUpperCase()}: ${m.filePath} (${m.retryCount} retries)`).join(`
`),g=`Sync Errors (${u.length} files):

${f}${u.length>15?`

... and ${u.length-15} more errors`:""}`;new T.Notice(g,12e3)})}).addButton(c=>{c.setButtonText("Clear Errors").setWarning().setDisabled(s===0).onClick(async()=>{confirm(`Are you sure you want to clear all ${s} sync errors?`)&&(await n.clearAllErrors(),new T.Notice("All sync errors cleared."),this.display())})})}catch(t){console.error("Failed to create error setting:",t),new T.Setting(r).setName("Sync Errors").setDesc("Error loading sync error information.").addButton(n=>{n.setButtonText("Reload").onClick(()=>this.display())})}}};
/*! Bundled license information:

ky/distribution/index.js:
  (*! MIT License © Sindre Sorhus *)
*/
